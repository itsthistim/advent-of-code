"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const got_1 = __importDefault(require("got"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const fs_1 = require("fs");
const crypto_1 = __importDefault(require("crypto"));
const { readFile, writeFile } = fs_1.promises;
function aocLoader(year, day, session = process.env.AOC_SESSION) {
    return __awaiter(this, void 0, void 0, function* () {
        if (session === undefined) {
            throw new Error('No session provided or exist as the AOC_SESSION environment variable');
        }
        const hash = crypto_1.default.createHash('sha256');
        hash.update(session);
        const hashedSession = hash.digest('hex');
        const filename = `aoc-${year}-${day}-${hashedSession}`;
        const tempPath = path_1.default.join(os_1.default.tmpdir(), filename);
        let ret;
        try {
            const input = yield readFile(tempPath)
                .then((buffer) => buffer.toString('utf8'))
                .catch(() => (0, got_1.default)(`https://adventofcode.com/${year}/day/${day}/input`, {
                headers: {
                    Cookie: `session=${session}`,
                },
                resolveBodyOnly: true,
            }));
            ret = input.replace(/\n$/, '');
            yield writeFile(tempPath, ret);
        }
        catch (error) {
            throw new Error(`Failed to fetch AoC data for year ${year} day ${day}${error instanceof Error ? `: ${error.message}` : ''}`);
        }
        return ret;
    });
}
exports.default = aocLoader;
module.exports = aocLoader;
